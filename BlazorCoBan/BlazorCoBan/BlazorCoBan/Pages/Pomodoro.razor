@page "/pomodoro"

<h3>Pomodoro</h3>

<center>
    <h2>@_min : @_sec </h2>

    <div class="form-group">
        <button type="submit" class="btn btn-outline-success" @onclick="StartAsync">Start</button>
        <button type="submit" class="btn btn-outline-danger" @onclick="StopAsync">Stop</button>
        <button type="submit" class="btn btn-outline-info" @onclick="ResetAsync">Reset</button>
    </div>
</center>

<i>count every five minutes: @_count</i>


@code {
    private System.Timers.Timer _timer;

    private int _min = 25;
    private int _sec = 00;
    private int _count = 0;

    public async void CountTimeAsync(object source, System.Timers.ElapsedEventArgs e)
    {
        if (_sec > 0)
        {
            _sec -= 1;
            if (_sec == 0 && _min % 5 == 0)
            {
                _count += 1;
            }
        }
        else if (_sec == 0 && _min > 0)
        {
            _min -= 1;
            _sec = 59;
            if (_min == 0)
            {
                _sec = 0;
                _timer.Stop();
                _timer.Enabled = false;
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task StartAsync()
    {
        if (_timer != null)
        {
            _timer.Dispose();
        }
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += CountTimeAsync;
        _timer.Enabled = true;
        _timer.AutoReset = true;
    }

    public async Task StopAsync()
    {
        _timer.Stop();
        _timer.Enabled = false;
    }

    public async Task ResetAsync()
    {
        _sec = 00;
        _min = 25;
        _count = 0;
        _timer.Stop();
    }
}
